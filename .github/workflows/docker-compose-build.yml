name: CI - Docker Compose Build & Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test Containers
    runs-on: ubuntu-latest

    steps:
      - name: üõé Checkout Repository
        uses: actions/checkout@v3

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: üèóÔ∏è Install Docker Compose (Fix for "command not found")
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: üèóÔ∏è Build and Start Services with Docker Compose
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          docker-compose up -d --build

      - name: ‚è≥ Wait for Containers to Initialize
        run: sleep 10  # Adjust based on startup time

      - name: ‚úÖ Check Running Containers
        run: |
          if [ "$(docker ps -q | wc -l)" -eq 0 ]; then
            echo "üö® No containers are running! Build failed."
            exit 1
          fi

      - name: üîç Detect Failed Containers (Ignore Known One-Offs)
        run: |
          # List containers that exited (non-zero or zero)
          EXITED_CONTAINERS=$(docker ps -a --filter "status=exited" --format "{{.Names}}")
          
          # Containers that are allowed to exit (like init jobs)
          ALLOWED_EXITED_CONTAINERS=("rabbitmq-setup")

          UNEXPECTED_EXITED=()

          for CONTAINER in $EXITED_CONTAINERS; do
            if [[ ! " ${ALLOWED_EXITED_CONTAINERS[@]} " =~ " ${CONTAINER} " ]]; then
              UNEXPECTED_EXITED+=($CONTAINER)
            fi
          done

          if [ ${#UNEXPECTED_EXITED[@]} -ne 0 ]; then
            echo "üö® Unexpected containers exited:"
            printf '%s\n' "${UNEXPECTED_EXITED[@]}"
            exit 1
          fi

      - name: üßπ Cleanup (Optional)
        if: always()
        run: docker-compose down
