name: CI - Docker Compose Build & Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test Containers
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🏗️ Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: 🏗️ Build and Start Services with Docker Compose
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          docker-compose up -d --build

      - name: ⏳ Wait for Containers to Initialize
        run: sleep 30  # Increased from 10 to 30 seconds

      - name: ✅ Check Running Containers
        run: |
          if [ "$(docker ps -q | wc -l)" -eq 0 ]; then
            echo "🚨 No containers are running! Build failed."
            exit 1
          fi

      - name: 📜 Print RabbitMQ Setup Logs
        run: docker logs yorkshire-crypto-exchange_rabbitmq-setup_1 || true

      - name: 🔍 Detect Failed Containers (Ignore Known One-Offs)
        run: |
          # List containers that exited
          EXITED_CONTAINERS=$(docker ps -a --filter "status=exited" --format "{{.Names}}")

          # Containers that are allowed to exit (e.g. init-only containers)
          ALLOWED_EXITED_CONTAINERS=("yorkshire-crypto-exchange_rabbitmq-setup_1")

          UNEXPECTED_EXITED=()

          for CONTAINER in $EXITED_CONTAINERS; do
            if [[ ! " ${ALLOWED_EXITED_CONTAINERS[@]} " =~ " ${CONTAINER} " ]]; then
              UNEXPECTED_EXITED+=($CONTAINER)
            fi
          done

          if [ ${#UNEXPECTED_EXITED[@]} -ne 0 ]; then
            echo "🚨 Unexpected containers exited:"
            printf '%s\n' "${UNEXPECTED_EXITED[@]}"
            exit 1
          fi

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose down