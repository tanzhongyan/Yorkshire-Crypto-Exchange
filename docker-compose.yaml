networks:
  kong-net:
    external: false

services:
  kong:
    image: kong:latest
    container_name: kong
    user: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/kong/kong.yml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: /usr/local/kong
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8443:8443/tcp"
      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    restart: on-failure
    security_opt:
      - no-new-privileges
  
  fiat-service:
    container_name: fiat-service
    build:
      context: ./api/atomic/fiat
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=user_db
      - DB_USER=user
      - DB_PASS=password
    volumes:
      - fiat_data:/var/lib/fiat_service
    networks:
      - kong-net
    expose:
      - "5000"
  
  # crypto-service:
  #   container_name: crypto-service
  #   build:
  #     context: ./api/atomic/crypto
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5002:5000"
  #   depends_on:
  #     - rabbitmq
  #     postgres:
  #       condition: service_healthy # wait until postgres healthy
  #   environment:
  #     - RUNNING_IN_DOCKER=true  # Detects Docker mode
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_NAME=user_db
  #     - DB_USER=user
  #     - DB_PASS=password
  #   volumes:
  #     - crypto_data:/var/lib/crypto_service
  #   networks:
  #     - kong-net
  #   expose:
  #     - "5000"

  user-service:
    container_name: user-service
    build:
      context: ./api/atomic/user
      dockerfile: Dockerfile
    ports:
      - "5003:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=user_db
      - DB_USER=user
      - DB_PASS=password
    volumes:
      - user_data:/var/lib/user_service
    networks:
      - kong-net
    expose:
      - "5000"

  identity-service:
    container_name: identity-service
    build:
      context: ./api/composite/identity
      dockerfile: Dockerfile
    ports:
      - "5004:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
    expose:
      - "5000"

  transaction-service:
    container_name: transaction-service
    build:
      context: ./api/atomic/transaction
      dockerfile: Dockerfile
    ports:
      - "5005:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
      # - DATABASE_URL=postgresql://user:password@postgres:5432/transaction_db # delete if needed
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=transaction_db
      - DB_USER=user
      - DB_PASS=password
    volumes:
      - transaction_data:/var/lib/transaction_service
    networks:
      - kong-net
    expose:
      - "5000"

  # rabbitmq:
  #   image: rabbitmq:management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq

  postgres:
    build: ./database
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: user_db, fiat_db, crypto_db, transaction_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    ports:
      - "5433:5432" # Changed local to 5433 due to possible existing local postgresql dbs
    healthcheck: # Needed to initialise all databases initially
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    networks:
      - kong-net

  # website:
  #   build:
  #     context: ./website
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     - fiat-service
  #     - user-service
  #     - crypto-service

volumes:
  fiat_data:
  user_data:
  # crypto_data:
  # rabbitmq_data:
  postgres_data:
  transaction_data: