networks:
  kong-net:
    driver: bridge
    external: false
  rabbit-net:
    driver: bridge
    external: false


services:
  kong:
    image: kong:latest
    container_name: kong
    user: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/kong/kong.yml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      # Only listen on localhost for admin API
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_HOST:-127.0.0.1}:8001"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_HOST:-127.0.0.1}:8002"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: /usr/local/kong
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8443:8443/tcp"
      - "${EXPOSE_PORTS:-127.0.0.1}:8001:8001"   # Admin API (conditional)
      - "${EXPOSE_PORTS:-127.0.0.1}:8002:8002"   # Admin GUI (conditional)
    expose:
      - "8444"
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    restart: on-failure
    security_opt:
      - no-new-privileges
  
  fiat-service:
    container_name: fiat-service
    build:
      context: ./api/atomic/fiat
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5001:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=fiat_db
      - DB_USER=${DB_USER:-user}
      - DB_PASS=${DB_PASSWORD:-password}
    volumes:
      - fiat_data:/var/lib/fiat_service
    networks:
      - kong-net
    expose:
      - "5000"
  
  crypto-service:
    container_name: crypto-service
    build:
      context: ./api/atomic/crypto
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5002:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      # - RABBITMQ_HOST=rabbitmq
      # - DATABASE_URL=postgresql://user:password@postgres:5432/crypto_db
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=crypto_db
      - DB_USER=${DB_USER:-user}
      - DB_PASS=${DB_PASSWORD:-password}
    volumes:
      - crypto_data:/var/lib/crypto_service
    networks:
      - kong-net
      # - rabbit-net
    expose:
      - "5000"

  user-service:
    container_name: user-service
    build:
      context: ./api/atomic/user
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5003:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=user_db
      - DB_USER=${DB_USER:-user}
      - DB_PASS=${DB_PASSWORD:-password}
    volumes:
      - user_data:/var/lib/user_service
    networks:
      - kong-net
    expose:
      - "5000"

  identity-service:
    container_name: identity-service
    build:
      context: ./api/composite/identity
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5004:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
      # - rabbit-net
    expose:
      - "5000"

  transaction-service:
    container_name: transaction-service
    build:
      context: ./api/atomic/transaction
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5005:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
      # - DATABASE_URL=postgresql://user:password@postgres:5432/transaction_db # delete if needed
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=transaction_db
      - DB_USER=${DB_USER:-user}
      - DB_PASS=${DB_PASSWORD:-password}
    volumes:
      - transaction_data:/var/lib/transaction_service
    networks:
      - kong-net
      # - rabbit-net
    expose:
      - "5000"

  orderbook-service:
    container_name: orderbook-service
    build:
      context: ./api/atomic/orderbook
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5012:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    environment:
      - RUNNING_IN_DOCKER=true  # Detects Docker mode
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=orderbook_db
      - DB_USER=${DB_USER:-user}
      - DB_PASS=${DB_PASSWORD:-password}
    volumes:
      - orderbook_data:/var/lib/orderbook_service
    networks:
      - kong-net
    expose:
      - "5000"

  deposit-service:
    container_name: deposit-service
    build:
      context: ./api/composite/deposit
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5006:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
      # - rabbit-net
    expose:
      - "5000"

  stripe-cli:
    image: stripe/stripe-cli:latest
    container_name: stripe-cli
    command: listen --api-key ${STRIPE_SECRET_KEY} --forward-to deposit-service:5000/api/v1/deposit/webhook
    environment:
      - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_DEVICE_NAME=local_dev
    networks:
      - kong-net
    depends_on:
      - deposit-service 
  
  ramp-service:
    container_name: ramp-service
    build:
      context: ./api/composite/ramp
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5007:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
    expose:
      - "5000"

  market-service:
    container_name: market-service
    build:
      context: ./api/composite/market
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5008:5000"
    depends_on:
      # - rabbitmq
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
    expose:
      - "5000"

  rabbitmq:
    image: rabbitmq:management
    restart: always
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5672:5672"
      - "${EXPOSE_PORTS:-127.0.0.1}:15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - rabbit-net

  rabbitmq-setup:
    build:
      context: ./rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbit-net

  postgres:
    build: ./database
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_MULTIPLE_DATABASES: user_db, fiat_db, crypto_db, transaction_db, orderbook_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    expose:
      - "5432"
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5433:5432"  # Only expose to localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user}"]
      interval: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    networks:
      - kong-net

  initiate-service:
    container_name: initiate-service
    build:
      context: ./api/composite/initiate
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5009:5000"
    depends_on:
      rabbitmq:
        condition: service_started # wait until rabbitmq healthy
      rabbitmq-setup:
        condition: service_started # wait until rabbitmq healthy
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
      - rabbit-net
  
  match-service:
    container_name: match-service
    build:
      context: ./api/composite/match
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5011:5000"
    depends_on:
      rabbitmq:
        condition: service_started # wait until rabbitmq healthy
      rabbitmq-setup:
        condition: service_started # wait until rabbitmq healthy
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
      - rabbit-net
    expose:
      - "5000"

  complete-service:
    container_name: complete-service
    build:
      context: ./api/composite/complete
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:5010:5000"
    depends_on:
      rabbitmq:
        condition: service_started # wait until rabbitmq healthy
      rabbitmq-setup:
        condition: service_started # wait until rabbitmq healthy
      postgres:
        condition: service_healthy # wait until postgres healthy
    networks:
      - kong-net
      - rabbit-net
    expose:
      - "5000"

  swagger-docs:
    container_name: swagger-docs
    build:
      context: ./swagger-docs
      dockerfile: Dockerfile
    ports:
      - "${EXPOSE_PORTS:-127.0.0.1}:3001:5000"
    networks:
      - kong-net
    depends_on:
      - fiat-service
      - crypto-service
      - user-service
      - transaction-service
      - identity-service
      - deposit-service
      - ramp-service
      - market-service
      - initiate-service
      - complete-service

  # website:
  #   build:
  #     context: ./website
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     - fiat-service
  #     - user-service
  #     - crypto-service

volumes:
  fiat_data:
  user_data:
  crypto_data:
  rabbitmq_data:
  postgres_data:
  transaction_data:
  orderbook_data: